[
  {
    "path": "blog/2025-02-20-EOSTRC_ep_5/",
    "title": "Enabling Open Science Through Research Code: Insights from Episode 5 - Testing Research Code",
    "description": "This is a blog sharing insights from Episode 5 of the Community Conversation series 'Enabling Open Science Through Research Code'.",
    "author": [
      {
        "name": "Anelda van der Walt, Saranjeet Kaur Bhogal, Abhishek Dasgupta, Sheena O‚ÄôConnell, Mireille Grobbelaar, Jyoti Bhogal",
        "url": "https://github.com/jyoti-bhogal"
      }
    ],
    "date": "2025-03-20",
    "categories": [
      "Research Software Engineering",
      "Open Science",
      "Coding",
      "Community Building",
      "Experience Blog",
      "Software Testing"
    ],
    "contents": "\nEpisode 5 bannerIntroduction\nIn the world of research software development, ensuring that code runs correctly and produces reliable results is crucial. However, software testing is often overlooked, particularly in academic settings where researchers may lack formal training in programming best practices. This challenge was a central theme in the recent discussion during episode 5 of our six-part series ‚ÄúEnabling Open Science Through Research Code‚Äù, where experts from diverse backgrounds shared their experiences and insights on making software testing accessible and effective.\nDuring the session, panellists emphasised that while research software development is often self-taught, adopting best practices such as software testing can improve both individual efficiency and collaboration. One of the mantras that continuously came up in the different episodes is that\n\nWe should be our own best collaborators first.\n\nEpisode 5 once again showed how good coding practices can benefit the coder as much as other contributors, collaborators, and users. This post summarises the discussion, highlighting practical tips for beginners and more advanced strategies for experienced developers.\nOur wonderful speakers included:\nAbhishek Dasgupta, Senior Research Software Engineer at Oxford Research Software Engineering group, University of Oxford, UK\nSaranjeet Kaur Bhogal, Research Software Engineer at Imperial College London, UK and co-founder of the RSE Asia Association\nSheena O‚ÄôConnell, Software developer, founder and trainer at Prelude, South Africa\nTips, Tools, and Practices for Novices\nIf you‚Äôre new to coding or research software development, software testing may seem like an advanced topic. However, as our panellists suggest, starting with simple practices can make a big difference in the reliability of your code.\n1. Start with Assertions\nAssertions are a lightweight way to check that your code behaves as expected. Sheena shared an example from her experience, explaining how beginners often overlook errors that could easily be caught by using assert statements in Python.\nAssertions act as built-in sanity checks and can help catch errors early before they lead to misleading research results.\n2. Use Smoke Testing\nSimply running your code from start to finish to ensure it doesn‚Äôt crash is an easy way to catch obvious issues. Sheena described this as a useful technique for those who may not yet have structured testing frameworks in place.\nAutomated tools like nbval can help validate Jupyter Notebooks by checking that expected outputs remain consistent, an approach that Abhishek recommended.\n3. Learn Basic Unit Testing\nUnit tests check individual functions or small sections of code. Abhishek stressed that even a simple test like assert 2 + 3 == 5 is a great first step.\nIn Python, pytest is a lightweight and easy-to-use testing framework, whereas in R, testthat provides a simple way to implement tests within research code.\n4. Keep Code Modular\nWriting functions instead of long scripts makes it easier to test individual components. As Sheena pointed out, ‚ÄúUntested code is brittle.‚Äù Structuring code into reusable functions makes adding tests more straightforward.\n5. Automate Where Possible\nUsing GitHub Actions or other Continuous Integration (CI) tools can automate testing whenever you update your code. Abhishek mentioned that CI is a great way to ensure code works across multiple platforms, which is particularly helpful when collaborating with researchers using different operating systems.\nFor R users, the {usethis} package simplifies the workflow setup, automating repetitive tasks (for both R packages as well as non-package projects), as suggested by Saranjeet. She also recommended using the {fusen} package for anyone new to R package development (and also for experienced developers while they are prototyping functions) as it involves writing the function as well as its documentation and unit tests in the same file, avoiding the risk of forgetting crucial steps.\nImage Credits:Torsten Zelger\nApproaches to Software Testing for Experienced Developers\nFor those already familiar with software development, a more structured approach to testing can improve reproducibility and collaboration. The panellists discussed key strategies for advanced users, including:\n1. Different Types of Testing\nUnit Testing: Ensures small, isolated parts of the code work as expected.\nIntegration Testing: Checks if different parts of the system function correctly together. Abhishek highlighted the importance of this, noting that end-to-end validation is often overlooked in research projects.\nRegression Testing: Ensures new changes don‚Äôt break existing functionality, an approach Sheena described as essential for long-term code maintenance.\nProperty-Based Testing: Uses tools like hypothesis in Python to test code with a range of inputs, uncovering unexpected behaviours. Abhishek noted this as particularly useful for numerical research software.\n2. Version Control and CI/CD\nGit and GitHub/GitLab: Version control helps track changes, making it easier to debug issues. Sheena emphasised that ‚Äúresearchers who don‚Äôt use version control end up with folders full of files like final_version_revised_final_final.py, which is a nightmare to maintain.‚Äù\nContinuous Integration (CI): Running tests automatically on GitHub ensures all code changes are validated before being merged. Abhishek explained that setting up CI allows researchers to avoid relying on manual testing across different machines.\n3. Cross-Platform Testing\nResearchers often work across different operating systems. Automating tests in cloud environments ensures compatibility with Windows, macOS, and Linux.\nTools like tox or nox (Python) allow testing across multiple versions of a language. Abhishek highlighted that CI workflows, once set up, eliminate the need to manually ask colleagues to test code on different platforms.\n4. Automating Data Validations\nData quality is critical in research. Sheena introduced pandera in Python, a tool that helps verify data integrity and data schemas before analysis.\nStatistical validation using libraries like scipy.stats can confirm that distributions match expected properties, an approach recommended for data-intensive projects.\n5. Balancing Testing with Research Deadlines\nWriting tests may seem like extra work, but it prevents time-consuming debugging later. Abhishek acknowledged that ‚Äúgetting 100% test coverage is impractical for most research projects, but basic integration tests should be a minimum.‚Äù\nUsing automated tools like R‚Äôs targets package helps manage computational workflows efficiently, only re-running necessary parts of the code. Saranjeet recommended this as a time-saving approach for researchers handling large datasets.\nConclusion\nSoftware testing is not just for professional developers‚Äîit is an essential practice for research reproducibility and collaboration. While beginners can start with simple assertions and unit tests, advanced users can implement continuous integration, property-based testing, and automated data validation to ensure code reliability.\nAs Anelda concluded,\n\nTesting is not just about making research more open; it‚Äôs about being your own best > collaborator.\n\nBy integrating these testing strategies into research software development, we can move toward a more open, transparent, and reliable scientific ecosystem.\nüì¢ Explore More:\nAccess our Resource Sheet, which contains numerous valuable resources shared by the panellists, facilitators, and participants.\nView the session recording on YouTube.\nThe first draft of this blog post was created with ChatGPT from the edited video transcript.\nLooking Ahead\nThe next episode in the series, ‚ÄúResearch Software Funding‚Äù will take place on March 20, 2025, at 08:30 UTC. Be sure to register here and join the conversation!\nThis series is an excellent opportunity to learn, connect, and grow as we work together to enable open science - one line of code at a time.\nThis meetup series is a collaboration between Talarify, RSSE Africa, RSE Asia, AREN, and ReSA.\nLearn More About Us\nFor more information and to join upcoming events, visit:\nRSSE Africa\nWebsite: https://rsse.africa\nSign up for our newsletter: https://talarify.us14.list-manage.com/subscribe?u=35d5db26d3b108b9ef9b9ac43&id=55e9f5a692\nJoin our LinkedIn group, where you can also share information with the broader community: https://www.linkedin.com/groups/12903402/\nRSE Asia\nWebsite: https://rse-asia.github.io/RSE_Asia/\nFor the latest news, events, activities, and opportunities, follow us on our LinkedIn page (https://www.linkedin.com/company/rse-asia-association/)\nTo join the RSE Asia community, please fill out our short Community Membership Form (https://docs.google.com/forms/d/1XSxDaTJzcNyGeDYXyJNVg1TDCo7un18PLFNiK6\\_jL2g/edit)\nAREN\nWebsite: https://africanrn.org/\nSign up: https://docs.google.com/forms/d/e/1FAIpQLSeeFkD5A4D9l6ncQWjKBiI-GqBOzL-JMe7Fx3ijUYEjHjDUoQ/viewform\nReSA\nWebsite: https://www.researchsoft.org/\nSign up for the newsletter: https://www.researchsoft.org/news/\nThe Amsterdam Declaration on Funding Research Software Sustainability\nBecome a signatory: https://adore.software/sign/\n\n",
    "preview": "blog/2025-02-20-EOSTRC_ep_5/banner_episode_5.png",
    "last_modified": "2025-04-11T18:36:30+05:30",
    "input_file": {},
    "preview_width": 2000,
    "preview_height": 1600
  },
  {
    "path": "blog/2025-02-18-EOSRTC_ep_4/",
    "title": "Enabling Open Science through Research Code: Insights from Episode 4 - Documentation for Research Code",
    "description": "This is a blog sharing insights from Episode 4 of the Community Conversation series 'Enabling Open Science Through Research Code'.",
    "author": [
      {
        "name": "Anelda van der Walt, Jyoti Bhogal",
        "url": "https://github.com/jyoti-bhogal"
      }
    ],
    "date": "2025-02-20",
    "categories": [
      "Research Software Engineering",
      "Open Science",
      "Coding",
      "Community Building",
      "Experience Blog"
    ],
    "contents": "\nEpisode 4 bannerImagine you‚Äôve spent months crafting a complex research software tool, refining algorithms, and running countless simulations. It works brilliantly‚Äîbut then, six months later, you revisit the code and‚Ä¶ you‚Äôre lost. Sounds familiar? You‚Äôre not alone. Experts shared their experiences and strategies for writing good documentation in the fourth episode of the Research Software Community Conversations Series titled Enabling Open Science through Research Code. Here‚Äôs what we learned from our participants and insightful panellists:\nJenny Wong - Product Manager @ 2i2c (UK/US)\nJoel Nitta - Associate Professor @ Chiba University (Japan)\nMthetho Sovara - Centre for High-Performance Computing (CHPC), National Integrated Cyberinfrastructure System (NICIS) CSIR (South Africa)\nüìå Why Documentation is Essential\nüöÄ Boosts Reproducibility: Research software often accompanies papers, but results can be difficult to replicate without documentation. As Jenny pointed out, in fluid dynamics research, well-documented simulation codes gained more adoption than poorly documented alternatives.\nü§ù Facilitates Collaboration: Well-documented projects attract more contributors and streamline knowledge transfer. Joel shared his experience in the rOpenSci community, where clear documentation allowed him to take over and improve an existing R package without needing direct input from the original creator.\n‚è≥ Enhances Longevity: Code without documentation quickly becomes unusable‚Äîeven by its original authors! Mthetho described how well-documented software in weather forecasting led to unexpected collaborations with the South African Weather Service and Ethiopian researchers.\nüîì Promotes Open Science: Accessible research software fosters innovation and inclusion worldwide. Jenny emphasised that accessible documentation enables wider adoption of tools, making scientific computing more democratic.\nüî• Common Challenges & Solutions\n‚è∞ Time Constraints ‚Üí Write minimal but clear documentation as you code. Joel suggested that legible code, such as meaningful variable names instead of ‚Äúx‚Äù or ‚Äúdat‚Äù, is itself a form of documentation that is even better than comments.\nüß© Lack of Standardisation ‚Üí Use templates and structured frameworks. Mthetho mentioned that clear, structured guides helped non-computational scientists successfully use OpenFOAM in unexpected fields like environmental science.\nüéØ Technical vs.¬†User Documentation ‚Üí Engage users in documentation efforts for clarity. Jenny highlighted the role of community-driven documentation efforts, such as hackathons, to improve usability.\nüõ† Best Practices for Better Documentation\n‚úçÔ∏è 1. Write as You Code\nWaiting until the end leads to missing details. Add inline comments and README files while developing. Joel emphasised that tools like RMarkdown (and its successor, Quarto) can be used for literate programming‚Äîthereby ensuring that the results of code are automatically generated alongside their description.\nüîÑ 2. Differentiate Documentation Types\n‚úî User-facing documentation: How to install, use, and troubleshoot.\n‚úî Developer-facing documentation: Comments, API references, contribution guides.\nüìö 3. Use the Right Tools\nüìÑ Markdown & Jupyter Notebooks ‚Äì Combine narrative and code.\nüìù Quarto & R Markdown ‚Äì For structured research outputs.\nüìò Sphinx & MIST ‚Äì Python-based documentation frameworks.\nüåê GitHub Wikis & Pages ‚Äì Host documentation openly.\nü§ñ AI-based tools (e.g., Cursor, Copilot) ‚Äì Assist with documentation (but always review!).\nü§ù 4. Community & Collaboration Matter\nüí° Participate in documentation hackathons. Jenny shared how Project Pythia‚Äôs hackathons provided a structured way to improve documentation in geospatial science. üåç Join communities like Project Pythia, The Carpentries, and Write the Docs.\nüí∞ 5. Advocate for Funding & Policy Support\nüì¢ Push for documentation funding in grant proposals.\nüèõ Engage with funders to integrate documentation into open science policies.\nüöÄ Future of Documentation: AI & Automation\nü§ñ Automated Documentation: AI tools generate initial drafts, saving researchers time. However, while helpful, AI-assisted documentation should always be reviewed for accuracy.\nüåç AI for Translation: Helps make documentation accessible in multiple languages, fostering global inclusivity. Anelda highlighted how AI tools might support research documentation in multilingual communities in the future. For now, we still need a human-in-the-loop translator for translation efforts. Especially for low-resourced languages.\n‚ö†Ô∏è Caution Needed: AI-generated content must be reviewed for accuracy and ethical considerations. Jenny raised concerns about biases in AI and the environmental impact of large-scale machine learning models.\nüéØ Final Thoughts: Make Documentation a Priority\nGreat research code deserves great documentation. It makes work reproducible, fosters collaboration, and ensures that software remains usable long after its creator has moved on. By embracing best practices and community support, we can all contribute to a culture where documentation is seen not as a burden‚Äîbut as a fundamental part of open science.\nüì¢ Explore More:\nAccess our Resource Sheet, which contains numerous valuable resources shared by the panellists, facilitators, and participants.\nView the session recording on YouTube.\nThe first draft of this blog post was created with ChatGPT from the edited video transcript.\nLooking Ahead\nThe next episode in the series, ‚ÄúTesting Research Code‚Äù will take place on February 20, 2025, at 08:30 UTC. Be sure to register here and join the conversation!\nFor those who missed Episode 4, a resources sheet with tips and the session recording on YouTube is available. This series is an excellent opportunity to learn, connect, and grow as we work together to enable open science - one line of code at a time.\nThis meetup series is a collaboration between Talarify, RSSE Africa, RSE Asia, AREN, and ReSA.\nLearn More About Us\nFor more information and to join upcoming events, visit:\nRSSE Africa\nWebsite: https://rsse.africa\nSign up for our newsletter: https://talarify.us14.list-manage.com/subscribe?u=35d5db26d3b108b9ef9b9ac43&id=55e9f5a692\nJoin our LinkedIn group, where you can also share information with the broader community: https://www.linkedin.com/groups/12903402/\nRSE Asia\nWebsite: https://rse-asia.github.io/RSE_Asia/\nFor the latest news, events, activities, and opportunities, follow us on our LinkedIn page (https://www.linkedin.com/company/rse-asia-association/)\nTo join the RSE Asia community, please fill out our short Community Membership Form (https://docs.google.com/forms/d/1XSxDaTJzcNyGeDYXyJNVg1TDCo7un18PLFNiK6\\_jL2g/edit)\nAREN\nWebsite: https://africanrn.org/\nSign up: https://docs.google.com/forms/d/e/1FAIpQLSeeFkD5A4D9l6ncQWjKBiI-GqBOzL-JMe7Fx3ijUYEjHjDUoQ/viewform\nReSA\nWebsite: https://www.researchsoft.org/\nSign up for the newsletter: https://www.researchsoft.org/news/\nThe Amsterdam Declaration on Funding Research Software Sustainability\nBecome a signatory: https://adore.software/sign/\n\n",
    "preview": "blog/2025-02-18-EOSRTC_ep_4/banner_episode_4.png",
    "last_modified": "2025-04-12T11:24:30+05:30",
    "input_file": {},
    "preview_width": 2000,
    "preview_height": 1600
  },
  {
    "path": "blog/2025-02-18-EOSTRC_ep_3/",
    "title": "Enabling Open Science through Research Code: Insights from Episode 3 - Opening up Research Code",
    "description": "This is a blog sharing insights from Episode 3 of the Community Conversation series 'Enabling Open Science Through Research Code'.",
    "author": [
      {
        "name": "Anelda van der Walt, Jyoti Bhogal",
        "url": "https://github.com/jyoti-bhogal"
      }
    ],
    "date": "2025-02-18",
    "categories": [
      "Research Software Engineering",
      "Open Science",
      "Coding",
      "Community Building",
      "Experience Blog"
    ],
    "contents": "\nEpisode 3 bannerIn December 2024, we hosted episode four of our six-part series on Enabling Opening Science through Research Code. This time, we focused on openly sharing research code. The conversation provided invaluable insights into best practices, challenges, and the impact of open source in research. Whether you are a researcher, software developer, or just getting started, here are the key takeaways from this inspiring discussion.\nWhy Open Research Code Matters\nResearch software plays a crucial role in scientific discovery. Making it openly accessible enhances transparency, reproducibility, and collaboration. The discussion highlighted several reasons why open code can be beneficial to those who develop it as well as the broader research community:\nReproducibility & Credibility: When researchers share their code, others can validate and build upon it, ensuring scientific integrity.\nCollaboration & Community Growth: Open software enables researchers and developers worldwide to work together, improving tools and methodologies.\nIncreased Citations & Impact: Studies with accessible code tend to receive more citations, increasing the visibility and influence of the research.\nFunding & Institutional Support: Many funding agencies now require researchers to share code and data as part of open science initiatives.\nChallenges and How to Overcome Them\nWhile making code open has clear benefits, it comes with its own set of challenges. Speakers shared personal experiences and solutions to common obstacles:\nFear of Criticism: Many researchers worry that sharing their code may invite scrutiny. However, constructive feedback leads to improved code quality.\nMaintaining Code Over Time: Researchers often move on to new projects and cannot maintain old code. One solution is to create a community around a project, inviting contributors to help maintain and improve it.\nData Privacy & Intellectual Property: Researchers must anonymise datasets or create synthetic versions that simulate actual data while maintaining confidentiality when dealing with sensitive data.\nDocumentation & Reusability: A well-documented project is far more valuable to others. Providing README files, usage instructions, and licensing information makes it easier for others to use and contribute.\nWe talk more about documentation in Episode 4!\n\nBest Practices for Sharing Research Code\nTo make code truly open and useful, researchers can consider the following best practices:\nUse Version Control Platforms: Platforms like GitHub, GitLab, and Bitbucket facilitate collaboration, version tracking, and code sharing.\nChoose an Appropriate License: Open source licenses like MIT, Apache 2.0, and GPL define how others can use and modify the code.\nProvide Clear Documentation: A README file explaining installation, usage, dependencies, and citation details makes the code accessible to others.\nInclude Citation Information: Using a CITATION.cff file ensures that researchers get credit for their work when their code is used in publications.\nUse Containerisation for Reproducibility: Tools like Docker and GitHub Code Spaces help ensure that code runs the same way on different machines.\nLeverage Community Support: Engaging with communities like Research Software Engineering (RSE) groups, The Carpentries, and others provides learning opportunities and networking.\nDiverse Perspectives on Open Science\nThe discussion brought together speakers from various backgrounds, including bioinformatics, linguistics, software engineering, and illustration. Their stories emphasised that open science is not just for software developers but also for researchers and creatives working in different fields.\nAdeyinka Oresanya, a software developer at CHAOSS in Nigeria\nChioma Onyido, a bioinformatician from Nigeria, shared how Bioconductor, an open-source project for bioinformatics, has been instrumental in her work.\nMars Lee, a technical illustrator, highlighted the importance of visual documentation to make open source more accessible.\nKate Huddlestone, a linguist at Stellenbosch University in South Africa, shared how open-source tools enabled her to work with sign language data, significantly advancing her research.\nJuan Pablo, a senior program manager at GitHub, discussed how GitHub provides tools like citation files and ORCID integration to make research software more discoverable and citable.\nFinal Advice for Researchers Interested in Open Code\nEach speaker shared a key piece of advice for those looking to engage in open research software:\nJoin a Community: Engaging with open-source and research communities provides learning and collaboration opportunities.\nTake Small Steps: Even minimal documentation, a simple README, or choosing a license makes a big difference.\nLeverage Available Resources: Many educational institutions provide free access to GitHub tools and training programs.\nDon‚Äôt Fear Making Mistakes: Sharing imperfect code is better than keeping it inaccessible. The community will help improve it.\nConclusion\nOpening research code benefits both individual researchers and the broader scientific community. By embracing best practices and leveraging community support, researchers can enhance collaboration, improve research reproducibility, and increase the impact of their work. Whether you are just starting or looking to improve your open science practices, remember that engagement, documentation, and a willingness to share and learn are the keys to success.\nThe first draft of this blog post was created with ChatGPT from the edited video transcript.\nLooking Ahead\nThe next episode in the series, ‚ÄúDocumentation for Research Code‚Äù will take place on January 23, 2025, at 08:30 UTC. Be sure to register here and join the conversation!\nFor those who missed Episode 3, a resources sheet with tips and the session recording is available. This series is an excellent opportunity to learn, connect, and grow as we work together to enable open science - one line of code at a time.\nThis meetup series is a collaboration between Talarify, RSSE Africa, RSE Asia, AREN, and ReSA.\nLearn More About Us\nFor more information and to join upcoming events, visit:\nRSSE Africa\nWebsite: https://rsse.africa\nSign up for our newsletter: https://talarify.us14.list-manage.com/subscribe?u=35d5db26d3b108b9ef9b9ac43&id=55e9f5a692\nJoin our LinkedIn group, where you can also share information with the broader community: https://www.linkedin.com/groups/12903402/\nRSE Asia\nWebsite: https://rse-asia.github.io/RSE_Asia/\nFor the latest news, events, activities, and opportunities, follow us on our LinkedIn page (https://www.linkedin.com/company/rse-asia-association/)\nTo join the RSE Asia community, please fill out our short Community Membership Form (https://docs.google.com/forms/d/1XSxDaTJzcNyGeDYXyJNVg1TDCo7un18PLFNiK6\\_jL2g/edit)\nAREN\nWebsite: https://africanrn.org/\nSign up: https://docs.google.com/forms/d/e/1FAIpQLSeeFkD5A4D9l6ncQWjKBiI-GqBOzL-JMe7Fx3ijUYEjHjDUoQ/viewform\nReSA\nWebsite: https://www.researchsoft.org/\nSign up for the newsletter: https://www.researchsoft.org/news/\nThe Amsterdam Declaration on Funding Research Software Sustainability\nBecome a signatory: https://adore.software/sign/\n\n",
    "preview": "blog/2025-02-18-EOSTRC_ep_3/banner_episode_3.png",
    "last_modified": "2025-04-12T11:17:33+05:30",
    "input_file": {},
    "preview_width": 2000,
    "preview_height": 1600
  },
  {
    "path": "blog/2024-11-30-EOSTRC_ep_2/",
    "title": "Enabling Open Science Through Research Code: Insights from Episode 2 - Enabling Reproducibility through Research Code",
    "description": "This is a blog sharing insights from Episode 2 of the Community Conversation series 'Enabling Open Science Through Research Code'.",
    "author": [
      {
        "name": "Jyoti Bhogal, Mireille Grobbelaar, Anelda van der Walt, Saranjeet Kaur Bhogal",
        "url": "https://github.com/jyoti-bhogal"
      }
    ],
    "date": "2024-12-04",
    "categories": [
      "Research Software Engineering",
      "Open Science",
      "Coding",
      "Community Building",
      "Experience Blog"
    ],
    "contents": "\nEpisode 2 bannerThis blog was originally hosted on the RSSE Africa webpage\nThe ‚ÄòEnabling Open Science Through Research Code‚Äô meet-up series, co-hosted by RSSE Africa and RSE Asia, continues to build momentum. Episode 2, titled ‚ÄúEnabling Reproducibility Through Research Code,‚Äù took place on November 14, 2024, bringing together a diverse group of participants and experts to discuss a cornerstone of open science‚Äîreproducibility. A valuable open educational resource related to this topic, which the meetup was based on, is available from CodeRefinery.\nReproduciblility through research codeThe Turing Way Community. This illustration is created by Scriberia with The Turing Way community, used under a CC-BY 4.0 licence. DOI: 10.5281/zenodo.3332807\nConnecting Researchers Who Code\nA key goal of this series is to connect researchers who code, especially those in Asia and Africa, with peers worldwide to foster collaboration and support. As Anelda van der Walt (RSSE Africa) explained:\n‚ÄúThere are so many researchers who code, but they‚Äôre often isolated and don‚Äôt have communities to share tools, best practices, or even just to vent about the challenges. We hope this series can be the starting point for those conversations.‚Äù\nWe welcomed participants from various disciplines, including health-related fields, law, linguistics, and bioinformatics. The audience represented a mix of coding-heavy researchers (spending over 50% of their day coding), less frequent coders, and those just beginning their coding journey.\nMeet the Panel\nEpisode 2 featured a diverse panel of experts who brought their unique perspectives on enabling reproducibility:\nKozo Nishida: Project Researcher, Tokyo University of Agriculture and Technology, Japan\nPeter van Heusden: Bioinformatician, South African National Bioinformatics Institute/University of the Western Cape, South Africa\nRadovan Bast: Research Software Engineer, UiT The Arctic University of Norway, and managing the CodeRefinery project.\nPanel Discussion: Tips for Enabling Reproducibility\nReproducibility, in its simplest terms, is about ensuring that research findings can be replicated and validated. Without reproducibility, there‚Äôs no way to confirm the reliability of scientific results.\nSaranjeet Kaur Bhogal, one of the session facilitators from RSE Asia, captured this sentiment perfectly when she said:\n‚ÄúBe your own best collaborator.‚Äù\nThis idea resonated with all the panellists, who emphasised the importance of documenting workflows and code in a way that‚Äôs accessible and understandable‚Äînot just for others, but for your future self.\nRadovan Bast added to this perspective, explaining:\n‚ÄúThe person you will collaborate with most within your academic career is your past and future self. We should be kind to our future selves!‚Äù\nWhether six months or years down the line, thorough documentation and explanation of your work ensures you‚Äîor anyone else‚Äîcan reproduce the results.\nKozo Nishida shared a practical example from metabolomics research, underlining the challenges of reproducibility in quantifying mass spectrometry data. He explained that creating annotations for mass spec peaks often requires manual tweaks and detailed adjustments. Without thorough documentation and clear steps, reproducing metabolomics quantifications becomes nearly impossible.\nPeter van Heusden reflected on his experiences entering the field of pathogen bioinformatics. He noted that many research papers described methodologies but often omitted critical details, highlighting the importance of reproducibility. He emphasised:\n‚ÄúIf it‚Äôs not in code, it‚Äôs not really reproducible.‚Äù\nFor Peter, reproducibility means translating what has been done manually into code, ensuring that workflows are transparent and repeatable.\nRadovan Bast pointed out that reproducibility encompasses many elements‚Äîdata, scripts, dependencies, environments, workflows, and more. He acknowledged that achieving perfect reproducibility can be daunting and advised:\n‚ÄúDon‚Äôt let perfect be the enemy of good enough.‚Äù\nRadovan reminded the audience that reproducibility doesn‚Äôt need to be flawless to be valuable. He emphasised the importance of sharing work in a reusable way to avoid reinventing the wheel or wasting time.\nPractical Tips for Ensuring Reproducibility\nThe session provided many actionable tips to help researchers make their work more reproducible. These included advice on file types, documentation tools, and simple practices like running code on a different computer to ensure it works across environments.\nAs with all sessions in the series, a comprehensive resource sheet summarising these tips is available here.\nThe Importance of Community in Reproducibility\nThe panel stressed how reproducibility benefits not just individual researchers but entire research communities:\nRadovan Bast stressed that limited time and resources make it essential to ‚Äústand on the shoulders of others‚Äù by building on existing tools and workflows rather than starting from scratch every time. However, he cautioned that when using others‚Äô code, researchers should always check the license to ensure they have permission to use it and later share their changes.\nPeter van Heusden highlighted the importance of structured approaches. Starting projects with standardised templates not only ensures consistency but also makes it easier to reproduce and reuse workflows.\nKozo Nishida added that reproducible code enables others to build upon your work, improving entire fields of research. He emphasised the importance of joining communities to share tools, collaborate, and foster reproducibility collectively.\nLicensing and Assisted Coding\nWhen using code found online, it‚Äôs crucial to respect the provided license and credit the author.\nAssisted coding with AI, however, raises unresolved questions about licensing and authorship. The panel noted that clearer guidelines from legal experts are needed as this area continues to evolve. It will be interesting to see how these tools and spaces adapt to address these challenges.\nLooking Ahead\nThe next episode in the series, ‚ÄúOpening Up Your Code,‚Äù will take place on December 12, 2024, at 08:30 UTC. Be sure to register here and join the conversation!\nFor those who missed Episode 2, a resources sheet with tips and the session recording is available. This series is an excellent opportunity to learn, connect, and grow as we work together to enable open science - one line of code at a time.\nThis meetup series is a collaboration between Talarify, RSSE Africa, RSE Asia, AREN, and ReSA.\nLearn More About Us\nFor more information and to join upcoming events, visit:\nRSSE Africa\nWebsite: https://rsse.africa\nSign up for our newsletter: https://talarify.us14.list-manage.com/subscribe?u=35d5db26d3b108b9ef9b9ac43&id=55e9f5a692\nJoin our LinkedIn group, where you can also share information with the broader community: https://www.linkedin.com/groups/12903402/\nRSE Asia\nWebsite: https://rse-asia.github.io/RSE_Asia/\nFor the latest news, events, activities, and opportunities, follow us on our LinkedIn page (https://www.linkedin.com/company/rse-asia-association/)\nTo join the RSE Asia community, please fill out our short Community Membership Form (https://docs.google.com/forms/d/1XSxDaTJzcNyGeDYXyJNVg1TDCo7un18PLFNiK6\\_jL2g/edit)\nAREN\nWebsite: https://africanrn.org/\nSign up: https://docs.google.com/forms/d/e/1FAIpQLSeeFkD5A4D9l6ncQWjKBiI-GqBOzL-JMe7Fx3ijUYEjHjDUoQ/viewform\nReSA\nWebsite: https://www.researchsoft.org/\nSign up for the newsletter: https://www.researchsoft.org/news/\nThe Amsterdam Declaration on Funding Research Software Sustainability\nBecome a signatory: https://adore.software/sign/\n\n",
    "preview": "blog/2024-11-30-EOSTRC_ep_2/banner_episode_2.png",
    "last_modified": "2024-12-31T17:43:56+05:30",
    "input_file": {},
    "preview_width": 2000,
    "preview_height": 1600
  },
  {
    "path": "blog/2024-10-30-EOSTRC_ep_1/",
    "title": "Enabling Open Science Through Research Code: Insights from Episode 1 - Conversations with Researchers Who Code",
    "description": "This is a blog sharing insights from Episode 1 of the Community Conversation series 'Enabling Open Science Through Research Code'.",
    "author": [
      {
        "name": "Jyoti Bhogal, Mireille Grobbelaar, Anelda van der Walt, Saranjeet Kaur Bhogal",
        "url": "https://github.com/jyoti-bhogal"
      }
    ],
    "date": "2024-10-29",
    "categories": [
      "Research Software Engineering",
      "Open Science",
      "Coding",
      "Community Building",
      "Experience Blog"
    ],
    "contents": "\nEpisode 1 bannerOn October 10, 2024, the first episode of the ‚ÄòEnabling Open Science Through Research Code‚Äô community conversation took place. The topic for the first episode was ‚ÄòConversations with Researchers Who Code‚Äô focusing on the pivotal role of research software in enabling open science. The event was hosted by RSSE Africa and the RSE Asia Association. It aimed to bring together researchers from various disciplines to share their experiences of coding, collaboration, and the challenges they face as they navigate the world of open science. This episode was a part of the celebration for International Research Software Engineer (RSE) Day, bringing attention to the growing importance of RSEs in research.\nSession Overview\nThe session kicked off with facilitators Anelda van der Walt and Saranjeet Kaur welcoming participants and introducing the co-facilitators Jyoti Bhogal and Mireille Grobbelaar. This diverse team set the stage for a lively discussion with four distinguished speakers: Dr.¬†Biandri Joubert, Dr.¬†Gaurav Bhalerao, Mahmoud Abdelrazek, and Prasad Sutar. The session had around 30 participants from all across the world.\nIntroductions & Open Science Insights\nAfter a warm welcome, the conversation shifted to the core topic: open science and the importance of research software and systems as described in the UNESCO Open Science Recommendations. The facilitators invited the speakers to share their academic backgrounds, work experiences, and current roles, giving the audience a sense of the various pathways that lead them into the world of research software coding.\nSome of the key questions posed to the speakers included:\nWhat did you study, and where?\nDo you have postgraduate qualifications?\nWhat is your current role, and how does coding feature in your work?\nThis introduction provided a backdrop to understand how the speakers‚Äô careers evolved, and how their coding skills were developed to support their research or that of others at the organisation where they work.\nPanel Discussion: The Life of a Researcher Who Codes\nThe heart of the session was a panel discussion where the speakers delved deeper into the realities of research coding. Some highlights from the discussion include:\nDr.¬†Gaurav Bhalerao explained how coding forms an integral part of his day-to-day activities, particularly in structuring large datasets for neuroscience research. He also shared the challenges of balancing coding with research responsibilities.\nMahmoud Abdelrazek talked about his work in geospatial analysis and how his team collaborates on coding projects. He highlighted the collaborative nature of his work, where coding is not only a personal skill but also a shared responsibility within his research group.\nDr.¬†Biandri Joubert touched on the challenges of being the sole programmer in her group and how she overcomes the feeling of isolation by participating in coding communities and seeking support from platforms like the Carpentries.\nPrasad Sutar discussed his experience with developing software that is used by others and the importance of ensuring that his coding practices align with both the research objectives and software quality standards.\nThe panel also explored whether all researchers should learn to code. They agreed that even if a researcher doesn‚Äôt need to code regularly, learning basic coding concepts is valuable. This foundational knowledge enables researchers to read and understand code at a high level, helping them grasp the algorithms or logic applied to address specific problem statements. A valuable analogy, comparing coding to medical training was suggested during the meetup. Just as it‚Äôs beneficial for everyone to learn basic first-aid, it‚Äôs useful for researchers to grasp fundamental coding concepts. Some may advance to become paramedics, equivalent to those using coding more regularly, while a few specialize deeply - similar to neurosurgeons or expert programmers. What are your thoughts? Should coding become a core skill for all researchers, or is it more practical to foster collaboration with coding specialists when needed?\nThe panel also explored topics like the amount of time spent coding, the collaborative nature of research software projects, and the availability of support and training for researchers.\nLearning and Community Support\nAn essential part of the discussion revolved around the resources and communities that help researchers improve their coding skills. Dr.¬†Gaurav Bhalerao recommended resources such as Carpentries lessons and online coding tutorials like p5.js for those starting out. The speakers emphasized the importance of continuous learning and staying connected with the global community through platforms like RLadies, Quarto, and others. To know about more resources please see the section Resources and Links.\nQ&A and Wrap-Up\nThe session concluded with a Q&A where participants posed questions about the pain points of learning to code, transitioning into a coding role from other fields, and how to stay updated with coding trends while maintaining research quality. One insightful comment came from Dr.¬†Biandri Joubert, who emphasized that code that runs doesn‚Äôt always mean it‚Äôs correct, highlighting the critical need for combining coding skills with sound statistical knowledge.\nThe facilitators wrapped up the event by sharing resources from partners, including RSSE Africa, RSE Asia, AREN, and ReSA, all of which provide platforms for collaboration, learning, and advocacy for the Research Software Engineering community.\nResources and Links\nTo access the wealth of resources shared in the session, visit our collection at Zenodo.\nFor those who missed this enlightening conversation, a recording of Episode 1 is available on the RSSE Africa website. Please remember to register for Episode 2 of the series. The conversation continues, highlighting the essential role of research software engineering in advancing open science globally.\nLearn More About Us\nFor more information and to join upcoming events, visit:\nRSSE Africa\nWebsite: https://rsse.africa\nSign up for our newsletter: https://talarify.us14.list-manage.com/subscribe?u=35d5db26d3b108b9ef9b9ac43&id=55e9f5a692\nJoin our LinkedIn group, where you can also share information with the broader community: https://www.linkedin.com/groups/12903402/\nRSE Asia\nWebsite: https://rse-asia.github.io/RSE_Asia/\nFor the latest news, events, activities, and opportunities, follow us on our LinkedIn page (https://www.linkedin.com/company/rse-asia-association/)\nTo join the RSE Asia community, please fill out our short Community Membership Form (https://docs.google.com/forms/d/1XSxDaTJzcNyGeDYXyJNVg1TDCo7un18PLFNiK6\\_jL2g/edit)\nAREN\nWebsite: https://africanrn.org/\nSign up: https://docs.google.com/forms/d/e/1FAIpQLSeeFkD5A4D9l6ncQWjKBiI-GqBOzL-JMe7Fx3ijUYEjHjDUoQ/viewform\nReSA\nWebsite: https://www.researchsoft.org/\nSign up for the newsletter: https://www.researchsoft.org/news/\nThe Amsterdam Declaration on Funding Research Software Sustainability\nBecome a signatory: https://adore.software/sign/\n\n",
    "preview": "blog/2024-10-30-EOSTRC_ep_1/Ep_1_banner.png",
    "last_modified": "2025-04-12T22:24:38+05:30",
    "input_file": {},
    "preview_width": 2000,
    "preview_height": 1600
  },
  {
    "path": "blog/2022-10-01-RSEAAExp22/",
    "title": "My experiece note of RSE Asia Australia Unconference 2022",
    "description": "This is my experience note about RSE Asia Australia (RSEAA) Unconference 2022. RSEAA was held at Zoom Events from September 14 to 16.",
    "author": [
      {
        "name": "Kozo Nishida",
        "url": "https://github.com/kozo2"
      }
    ],
    "date": "2022-10-18",
    "categories": [
      "Research Software Engineering",
      "Community Building",
      "Unconference",
      "Experience Blog"
    ],
    "contents": "\r\n\r\n\r\n\r\n\r\n\r\nWhat is the RSEAA Unconference?\r\nAn unconference is a conference where all participants engage in oactive discussion rather than just listening to the speaker‚Äôs talk.\r\nThe RSEAA unconference had a mixed style of regular conference and unconference.\r\nThe regular style part had three keynote and a panel discussion.\r\nRecordings of the keynotes and panel discussion are available on YouTube.\r\n\r\n\r\n\r\n\r\n\r\n\r\nIn addition, it should be noted that the summary report is published at DOI (figshare) below.\r\n(It‚Äôs great, so please take a look.)\r\nMosbergen, Rowland (2022): Research Software Engineer Asia Australia Unconference Summary Report. figshare. Online resource. https://doi.org/10.6084/m9.figshare.21201989.v2\r\nThoughts on the keynotes\r\nRSEAA had three keynotes.\r\nI watched the Mars and Anne keynotes live.\r\n(I was unable to watch Jess‚Äôs keynote live.)\r\nHere are my thoughts on Mars and Anne‚Äôs keynote.\r\nMars Lee\r\nMars is a technical illustrator at Quansight.\r\nMars has a slightly different career path for RSE, and she introduced it in the keynote.\r\nI think Mars‚Äô talk was a great talk that helped improve inclusivity of the RSE community.\r\nYou can check the slides in this GitHub repo.\r\n\r\n\r\nAnne Steele\r\nAnne is a community manager of the Turing Way.\r\nAnne‚Äôs talk covered her career history, what she‚Äôs learned through her career and the projects she‚Äôs working on.\r\nAnne introduced the objectives of equality, diversity and inclusion in improving reproducibility and openness of research.\r\nIn Japan, where I live, there is no Community Manager for Open Science like Anne.\r\nSo it was an exciting opportunity for me.\r\n\r\n\r\nAbout the part of ‚ÄúUnconference‚Äù\r\nThe parts other than the keynote were held in an ‚ÄúUnconference‚Äù format.\r\nHere are the themes of the discussion that took place there.\r\nWithin the RSEAA Zoom Event, we were able to enter and leave rooms that were divided into different themes for the unconference.Computational Reproducibility\r\nQuantify RSE outputs\r\nBenchmarking domain-specific research workflow solutions at an international level\r\nHosting research software\r\n#BridgingTheGap between #Biologists and #Programmers\r\nWhat exactly does the most senior RSE look like?\r\nQuestions to ask your supervisor at your RSE performance review\r\nWhat would a secure RSE position look like?\r\nLet‚Äôs discuss employment realities, as a student, as a grad, as a postgrad, as an ECR\r\nRSE Silos\r\nSoftware as first-class outputs\r\nJustifying maintenance work\r\nA Web Platform for RSEs\r\nActionable Items1 - Community Building\r\nActionable Items2 - Peer programming and collaboration\r\nWhat are your thoughts on each of the above themes?\r\nProbably all of them are exactly what you(==RSE) want to discuss with someone.\r\nI was very impressed to learn that there are places (communities) in the world where people can discuss these themes.\r\n‚ÄúImpressions about the RSEAA accessibility‚Äù and ‚Äúa call for non-English-speaking RSEs participation‚Äù\r\nRSEAA had a great attention to accessibility.\r\nI am Japanese and I am not good at English.\r\nHowever, RSEAA had Zoom‚Äôs Live Transcription feature, so I had no trouble listening to English.\r\nMany Japanese can read English, but cannot listen or speak.\r\nRSEAA is well prepared on accessibility and Liz Hare has provided a high level accessibility report for the conference.\r\nIf you‚Äôre avoiding joining the RSE community because you‚Äôre not good at English, don‚Äôt be afraid.\r\nThe RSE community is a community that cares about inclusiveness.\r\nPlease feel free to join to the RSE community!\r\nFurther information about RSE and my gratitude for RSEAA organizaers\r\nIf you are interested in the RSE community, please take a look at International RSE Survey 2022.\r\nIt was just released during this RSEAA.\r\nI think that looking at the survey results will help us understand the current situation and think about the future.\r\nFinally, I would like to thank all the organizers for running RSEAA.\r\n\r\n\r\n\r\n",
    "preview": "blog/2022-10-01-RSEAAExp22/preview.png",
    "last_modified": "2024-12-31T17:43:56+05:30",
    "input_file": {},
    "preview_width": 1183,
    "preview_height": 332
  },
  {
    "path": "blog/2022-10-01-RSEAAExp22-ja/",
    "title": "RSE Asia Australia Unconference 2022 ‰ΩìÈ®ì„É¨„Éù„Éº„Éà",
    "description": "„Åì„Çå„ÅØ„ÄÅ„Ç¢„Ç∏„Ç¢„Ç™„Éº„Çπ„Éà„É©„É™„Ç¢Âú∞Âüü„ÅßÂàù„ÇÅ„Å¶„ÅÆ\nRSE [Research Software Engineer „ÅÆÁï•] „ÅÆ„Ç´„É≥„Éï„Ç°„É¨„É≥„Çπ (‰ª•Èôç RSEAA)\n„ÅÆ‰ΩìÈ®ì„É¨„Éù„Éº„Éà„Åß„Åô„ÄÇ\nRSEAA „ÅØ„ÄÅ2022 Âπ¥ 9 Êúà 14 ÔΩû 16 Êó•„Å´ Zoom Events „ÅßÈñãÂÇ¨„Åï„Çå„Åæ„Åó„Åü„ÄÇ",
    "author": [
      {
        "name": "Ë•øÁî∞ Â≠ù‰∏â",
        "url": "https://github.com/kozo2"
      }
    ],
    "date": "2022-10-07",
    "categories": [
      "Research Software Engineering",
      "Community Building",
      "Unconference",
      "Experience Blog"
    ],
    "contents": "\n\n\n\n\n\nRSE „ÅÆ„Ç¢„É≥„Ç´„É≥„Éï„Ç°„É¨„É≥„Çπ„Å®„ÅØ‰Ωï„Åã\nRSE „ÅØ Research Software Engineer „ÅÆÁï•Áß∞„Åß„Åô„ÄÇ\nRSE„ÅÆÂÆöÁæ©„ÇíÁü•„Çã„Å´„ÅØ„Åì„ÅÆ„É™„É≥„ÇØ„ÇíÂèÇÁÖß„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ\n„Ç¢„É≥„Ç´„É≥„Éï„Ç°„É¨„É≥„Çπ „Å®„ÅØÂèÇÂä†ËÄÖÂêåÂ£´„Åå‰∏ª‰ΩìÁöÑ„Å´Ë≠∞Ë´ñ„Åô„Çã„Çπ„Çø„Ç§„É´„ÅÆ„Ç´„É≥„Éï„Ç°„É¨„É≥„Çπ„ÅÆ„Åì„Å®„Åß„Åô„ÄÇ\nRSEAA „ÅÆ„Ç¢„É≥„Ç´„É≥„Éï„Ç°„É¨„É≥„Çπ„ÅØ„ÄÅ\nÈÄöÂ∏∏„ÅÆ„Ç´„É≥„Éï„Ç°„É¨„É≥„Çπ„ÅÆ„Çà„ÅÜ„Å™„Ç≠„Éº„Éé„Éº„Éà„Çπ„Éî„Éº„Ç´„Éº+„Éë„Éç„É´„Éá„Ç£„Çπ„Ç´„ÉÉ„Ç∑„Éß„É≥„Å®„ÄÅ\n„Ç¢„É≥„Ç´„É≥„Éï„Ç°„É¨„É≥„Çπ„Åå„Éü„ÉÉ„ÇØ„Çπ„Åï„Çå„Åü„Çπ„Çø„Ç§„É´„ÅßÈñãÂÇ¨„Åï„Çå„Åæ„Åó„Åü„ÄÇ\n„Ç≠„Éº„Éé„Éº„Éà„Çπ„Éî„Éº„Ç´„Éº„Å®„Éë„Éç„É´„Éá„Ç£„Çπ„Ç´„ÉÉ„Ç∑„Éß„É≥„Å´„Å§„ÅÑ„Å¶„ÅØÈå≤ÁîªÁâ©„ÇíYouTube„ÅßË¶ã„Çã„Åì„Å®„Åå„Åß„Åç„Åæ„Åô„ÄÇ\n\n\n\n\n\n\n„Ç≠„Éº„Éé„Éº„Éà„Çπ„Éî„Éº„ÉÅ„Å´Èñ¢„Åô„ÇãÊÑüÊÉ≥\nRSEAA „Å´„ÅØ3‰∫∫„ÅÆ„Ç≠„Éº„Éé„Éº„Éà„Çπ„Éî„Éº„ÉÅ„Åå„ÅÇ„Çä„Åæ„Åó„Åü„ÄÇ\nÁßÅ„ÅØ Mars „Å® Anne „ÅÆ„Çπ„Éî„Éº„ÉÅ„Çí„É©„Ç§„Éñ„ÅßËÅ¥Ë¨õ„Åó„Åæ„Åó„Åü„ÄÇ\nÁßÅ„ÅØ Jess „ÅÆ„Çπ„Éî„Éº„ÉÅ„ÅØ‰ªï‰∫ã„ÅÆÈÉΩÂêà„Åß„É©„Ç§„Éñ„ÅßËÅû„Åè„Åì„Å®„ÅØ„Åß„Åç„Åæ„Åõ„Çì„Åß„Åó„Åü„ÄÇ\n„Åì„Åì„Åß„ÅØ Mars „Å® Anne „ÅÆ„Ç≠„Éº„Éé„Éº„Éà„Å´Èñ¢„Åô„ÇãÊÑüÊÉ≥„ÇíËø∞„Åπ„Åæ„Åô„ÄÇ\nMars Lee\nMars „ÅØ Quansight „ÅÆ„ÉÜ„ÇØ„Éã„Ç´„É´„Ç§„É©„Çπ„Éà„É¨„Éº„Çø„Éº„Åß„Åô„ÄÇ\nMars „ÅØ RSE „Å®„Åó„Å¶„ÅØÂ∞ë„ÅóÂ§â„Çè„Å£„Åü„Ç≠„É£„É™„Ç¢„Éë„Çπ„ÅÆÊåÅ„Å°‰∏ª„Åß„ÅÇ„Çä„ÄÅÂΩºÂ•≥„ÅØ„Åù„Çå„Çí„Åì„ÅÆ„Ç≠„Éº„Éé„Éº„Éà„Çπ„Éî„Éº„ÉÅ„ÅßÁ¥π‰ªã„Åó„Å¶„ÅÑ„Åæ„Åó„Åü„ÄÇ\nMars „ÅÆ„Éà„Éº„ÇØ„ÅØ„ÄÅRSE„Ç≥„Éü„É•„Éã„ÉÜ„Ç£„ÅÆÂåÖÊã¨ÊÄß„ÅÆÂêë‰∏ä„Å´ÂΩπÁ´ã„Å§„Åô„Å∞„Çâ„Åó„ÅÑ„Éà„Éº„ÇØ„Å†„Å£„Åü„Å®ÊÄù„ÅÑ„Åæ„Åô„ÄÇ\nMars „ÅÆ„Çπ„É©„Ç§„Éâ„ÅØ„ÄÅ„Åì„ÅÆ GitHub „É™„É≥„ÇØ\n„Å´„ÅÇ„Çä„Åæ„Åô„ÄÇ\n\n\nAnne Steele\nAnne „ÅØ The Turing Way „ÅÆ„Ç≥„Éü„É•„Éã„ÉÜ„Ç£„Éû„Éç„Éº„Ç∏„É£„Éº„Åß„Åô„ÄÇ\nAnne „ÅÆ„Éà„Éº„ÇØ„ÅØÂΩºÂ•≥„ÅÆ„Ç≠„É£„É™„Ç¢„ÅÆÊ≠¥Âè≤„ÄÅÂΩºÂ•≥„ÅåÂ≠¶„Çì„Åß„Åç„Åü„Åì„Å®„ÄÅ„Åù„Åó„Å¶‰ªäÈñ¢„Çè„Å£„Å¶„ÅÑ„Çã„Éó„É≠„Ç∏„Çß„ÇØ„Éà„ÇíÁ¥π‰ªã„Åô„Çã„ÇÇ„ÅÆ„Åß„Åó„Åü„ÄÇ\nAnne „ÅØ‰∏ª„Å´ The Turing Way „ÇíÈÄö„Åó„Å¶ÂÜçÁèæÊÄß„ÅÆÊîπÂñÑ„ÇÑÁ†îÁ©∂„ÅÆ„Ç™„Éº„Éó„É≥Âåñ„Å´„Åä„ÅÑ„Å¶„ÄÅÂπ≥Á≠â„ÄÅÂ§öÊßòÊÄß„ÄÅÂåÖÊã¨ÊÄß„Å®„ÅÑ„Å£„ÅüÁõÆÁöÑ„Çí„Å©„ÅÆ„Çà„ÅÜ„Å´ÂÆüÁèæ„Åó„Çà„ÅÜ„Å®„Åó„Å¶„ÅÑ„Çã„Åã„ÇíË™¨Êòé„Åó„Å¶„ÅÑ„Åæ„Åó„Åü„ÄÇ\nÊó•Êú¨„Åß„ÅØ Anne „ÅÆ„Çà„ÅÜ„Å™„Ç™„Éº„Éó„É≥„Çµ„Ç§„Ç®„É≥„Çπ„Ç≥„Éü„É•„Éã„ÉÜ„Ç£„ÅÆ„Åü„ÇÅ„ÅÆ„Ç≥„Éü„É•„Éã„ÉÜ„Ç£„Éû„Éç„Éº„Ç∏„É£„Éº„ÅØ„ÅÑ„Åæ„Åõ„Çì„ÄÇ\n„Åù„ÅÆ„Åü„ÇÅ„ÄÅ„Åù„Çå„ÅØË≤¥Èáç„Å™Ê©ü‰ºö„Åß„Åó„Åü„ÄÇ\n\n\n„Çπ„Éà„É©„ÉÜ„Ç∏„Éº„Å®„Éù„É™„Ç∑„Éº„ÅÆ„Éë„Éç„É´„Éá„Ç£„Çπ„Ç´„ÉÉ„Ç∑„Éß„É≥„Å®„Ç¢„É≥„Ç´„É≥„Éï„Ç°„É¨„É≥„Çπ„Å´„Å§„ÅÑ„Å¶\n„Ç≠„Éº„Éé„Éº„Éà‰ª•Â§ñ„ÅÆ„Éë„Éº„Éà„ÅØ„Ç¢„É≥„Ç´„É≥„Éï„Ç°„É¨„É≥„ÇπÂΩ¢Âºè„ÅßË°å„Çè„Çå„Åæ„Åó„Åü„ÄÇ\n„Åì„Åì„Åß„ÅØ„Åù„Åì„ÅßË°å„Çè„Çå„ÅüË≠∞Ë´ñ„ÅÆ„ÉÜ„Éº„Éû„ÇíÁÆáÊù°Êõ∏„Åç„Åó„Åæ„Åô„ÄÇ\nZoom Events ÂÜÖ„Åß„ÅØ„ÄÅ„Ç¢„É≥„Ç´„É≥„Éï„Ç°„É¨„É≥„Çπ„ÅÆ„ÉÜ„Éº„ÉûÊØé„Å´ÂàÜ„Åã„Çå„ÅüÈÉ®Â±ã„ÇíÈÅ∏Êäû„Åó„Å¶ÂÖ•ÈÄÄÂá∫„Åß„Åç„Åæ„Åó„ÅüË®àÁÆó„ÅÆÂÜçÁèæÊÄß„Å´„Å§„ÅÑ„Å¶ (Computational Reproducibility)\nRSE „ÅÆÊàêÊûú„ÅÆÂÆöÈáèÂåñ„Å´„Å§„ÅÑ„Å¶ (Quantify RSE outputs)\nÂõΩÈöõ„É¨„Éô„É´„Åß„ÅÆ„Éâ„É°„Ç§„É≥Âõ∫Êúâ„ÅÆÁ†îÁ©∂„ÉØ„Éº„ÇØ„Éï„É≠„Éº„ÇΩ„É™„É•„Éº„Ç∑„Éß„É≥„ÅÆ„Éô„É≥„ÉÅ„Éû„Éº„ÇØ (Benchmarking domain-specific research workflow solutions at an international level)\nÁ†îÁ©∂„ÇΩ„Éï„Éà„Ç¶„Çß„Ç¢„ÅÆ„Éõ„Çπ„ÉÜ„Ç£„É≥„Ç∞„Å´„Å§„ÅÑ„Å¶ (Hosting research software)\nBiologists „Å® Programmers „ÅÆ„ÇÆ„É£„ÉÉ„Éó„ÇíÂüã„ÇÅ„Çã„Åì„Å®„Å´„Å§„ÅÑ„Å¶ (#BridgingTheGap between #Biologists and #Programmers)\nÊúÄ‰∏äÁ¥ö„ÅÆ RSE „Å®„ÅØÊ≠£Á¢∫„Å´„ÅØ„Å©„ÅÆ„Çà„ÅÜ„Å™„ÇÇ„ÅÆ„Åã? (What exactly does the most senior RSE look like?)\nRSE „ÅÆ„Éë„Éï„Ç©„Éº„Éû„É≥„Çπ„ÅÆ„É¨„Éì„É•„Éº„Åß‰∏äÂè∏„Å´Â∞ã„Å≠„ÇãË≥™Âïè (Questions to ask your supervisor at your RSE performance review)\nÂÆâÂÖ®„Å™ RSE „Éù„Ç∏„Ç∑„Éß„É≥„Å®„ÅØ„Å©„ÅÆ„Çà„ÅÜ„Å™„ÇÇ„ÅÆ„Åã? (What would a secure RSE position look like?)\nÂ≠¶Áîü„Å®„Åó„Å¶„ÄÅÂçíÊ•≠Áîü„Å®„Åó„Å¶„ÄÅÂ§ßÂ≠¶Èô¢Áîü„Å®„Åó„Å¶„ÄÅECR [Ê≥®: Early Career Researcher] „Å®„Åó„Å¶„ÄÅÈõáÁî®„ÅÆÁèæÂÆü„Å´„Å§„ÅÑ„Å¶Ë©±„ÅóÂêà„Åä„ÅÜ (Let‚Äôs discuss employment realities, as a student, as a grad, as a postgrad, as an ECR)\nRSE „ÅÆË§áÊï∞„ÅÆ„Çµ„Ç§„É≠„Å´„Å§„ÅÑ„Å¶ [Ê≥®: „Çµ„Ç§„É≠„Å®„ÅØ„Ç¢„Éó„É™„ÇÑ„Ç∑„Çπ„ÉÜ„É†„ÅåÂ≠§Á´ã„ÅóÊÉÖÂ†±„ÅåÈÄ£Êê∫„Åï„Çå„Å¶„ÅÑ„Å™„ÅÑ„Åì„Å®„ÇíË®Ä„ÅÑ„Åæ„Åô] (RSE Silos)\n‰∏ÄÊµÅ„ÅÆ„Ç¢„Ç¶„Éà„Éó„ÉÉ„Éà„Å®„Åó„Å¶„ÅÆ„ÇΩ„Éï„Éà„Ç¶„Çß„Ç¢„Å´„Å§„ÅÑ„Å¶ (Software as first-class outputs)\n‰øùÂÆà‰ΩúÊ•≠„ÇíÊ≠£ÂΩìÂåñ„Åô„Çã„Åì„Å®„Å´„Å§„ÅÑ„Å¶ [Ê≥®: Á†îÁ©∂„ÇΩ„Éï„Éà„Ç¶„Çß„Ç¢Ê•≠Áïå„Åß„ÅØ‰øùÂÆà„Å´ÂØæ„Åô„ÇãË©ï‰æ°„ÅØ„Åï„Çå„Åæ„Åõ„Çì] (Justifying maintenance work)\nRSE ÈÅî„ÅÆ„Åü„ÇÅ„ÅÆ„Ç¶„Çß„Éñ„Éó„É©„ÉÉ„Éà„Éï„Ç©„Éº„É†„Å´„Å§„ÅÑ„Å¶ (A Web Platform for RSEs)\nÂÆüË°åÂèØËÉΩ„Å™„Ç¢„Ç§„ÉÜ„É†1 - „Ç≥„Éü„É•„Éã„ÉÜ„Ç£„ÅÆÊßãÁØâ (Actionable Items1 - Community Building)\nÂÆüË°åÂèØËÉΩ„Å™„Ç¢„Ç§„ÉÜ„É†2 - Peer programming [Ê≥®: ‰Ωï„Çâ„Åã„ÅÆÁí∞Â¢É„ÇíË§áÊï∞‰∫∫„ÅßÂÖ±Êúâ„Åó„Å¶„Éó„É≠„Ç∞„É©„Éü„É≥„Ç∞„Åô„Çã„Åì„Å®] „Å®„Ç≥„É©„Éú„É¨„Éº„Ç∑„Éß„É≥ (Actionable Items2 - Peer programming and collaboration)\n‰∏äË®ò„ÅÆÂêÑ„ÉÜ„Éº„Éû„ÇíË¶ã„Å¶„ÄÅ„ÅÇ„Å™„Åü„ÅØ„Å©„ÅÜÊÄù„Çè„Çå„Åæ„Åó„Åü„ÅãÔºü\n„Åä„Åù„Çâ„Åè„Å©„Çå„ÇÇÊôÆÊÆµÁñëÂïè„Å´ÊÑü„Åò„Å¶„ÅÑ„Çã„ÄÅ„Åó„Åã„ÅóË∫´Ëøë„Å´Áõ∏Ë´á„Åô„Çã‰∫∫„Åå„ÅÑ„Å™„ÅÑ„ÄÅ„Å®ÊÄù„ÅÜ„Åì„Å®„Åß„ÅØ„Å™„ÅÑ„Åß„Åó„Çá„ÅÜ„ÅãÔºü\n„Åù„Çå„ÅØ„Åæ„Åï„Å´ÁßÅ„ÇÇÂêå„Åò„Åß„ÅÇ„Çä„ÄÅ„Åì„ÅÆ„Ç¢„É≥„Ç´„É≥„Éï„Ç°„É¨„É≥„Çπ„Å´ÂèÇÂä†„Åó„Å¶\n„Äå„Åì„ÅÜ„ÅÑ„Å£„Åü„ÉÜ„Éº„Éû„ÇíË≠∞Ë´ñ„Åß„Åç„ÇãÂ†¥(„Ç≥„Éü„É•„Éã„ÉÜ„Ç£)„Åå‰∏ñÁïå„Å´„ÅØÂ≠òÂú®„Åô„Çã„ÅÆ„Å†„Äç„Å®„ÅÑ„ÅÜ„Åì„Å®„ÇíÁü•„Çä„ÄÅÊÑüÈäò„ÇíÂèó„Åë„Åæ„Åó„Åü„ÄÇ\n„Ç¢„ÇØ„Çª„Ç∑„Éì„É™„ÉÜ„Ç£„Å´Èñ¢„Åô„ÇãÂç∞Ë±°„Å®„ÄÅÈùûËã±Ë™ûÂúè„ÅÆ RSE ÈÅî„Å∏„ÅÆÂèÇÂä†„ÅÆÂëº„Å≥„Åã„Åë\nRSEAA „ÅØ„Ç¢„ÇØ„Çª„Ç∑„Éì„É™„ÉÜ„Ç£„Å´ÂØæ„Åô„ÇãÈÖçÊÖÆ„ÅåÂÑ™„Çå„Å¶„ÅÑ„Åæ„Åó„Åü„ÄÇ\nÁßÅ„ÅØÊó•Êú¨‰∫∫„Åß„ÅÇ„ÇäËã±Ë™û„ÅåÂæóÊÑè„Åß„ÅØ„ÅÇ„Çä„Åæ„Åõ„Çì„ÄÇ\n„Åß„Åô„Åå RSEAA „Åß„ÅØ Zoom „ÅÆ live transcription Ê©üËÉΩ„ÅåÊúâÂäπÂåñ„Åï„Çå„Å¶„Åä„Çä„ÄÅËã±Ë™û„ÇíËÅû„Åç„Å®„Çã„Åì„Å®„Å´„Å§„ÅÑ„Å¶„ÅØ‰∏çËá™Áî±„Åå„ÅÇ„Çä„Åæ„Åõ„Çì„Åß„Åó„Åü„ÄÇ\nÊó•Êú¨‰∫∫„ÅÆÂ§ö„Åè„ÅØ„É™„Éº„Éá„Ç£„É≥„Ç∞„ÅØ„Åß„Åç„Åæ„Åô„Åå„ÄÅ„É™„Çπ„Éã„É≥„Ç∞„Å®„Çπ„Éî„Éº„Ç≠„É≥„Ç∞„Åå„Åß„Åç„Åæ„Åõ„Çì„ÄÇ\nRSEAA „Åå„Ç¢„ÇØ„Çª„Ç∑„Éì„É™„ÉÜ„Ç£„Å´Èñ¢„Åó„Å¶Ê∫ñÂÇô„Åó„ÅüÂÜÖÂÆπ„ÅÆË©≥Á¥∞„ÅØ„Åì„ÅÆ„É™„É≥„ÇØ„ÇíÂèÇÁÖß„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ\n„ÇÇ„Åó„ÅÇ„Å™„Åü„ÅåËã±Ë™û„ÅåËã¶Êâã„Å†„Åã„Çâ„Å®„ÅÑ„ÅÜÁêÜÁî±„Åß RSE „Ç≥„Éü„É•„Éã„ÉÜ„Ç£„Å∏„ÅÆÂèÇÂä†„ÇíÈÅø„Åë„Å¶„ÅÑ„Çã„ÅÆ„Åß„ÅÇ„Çå„Å∞„ÄÅÊÅê„Çå„ÇíÊÑü„Åò„ÇãÂøÖË¶Å„ÅØ„ÅÇ„Çä„Åæ„Åõ„Çì„ÄÇ\nRSE „Ç≥„Éü„É•„Éã„ÉÜ„Ç£„ÅØÂåÖÊã¨ÊÄß„Å´ÂØæ„Åô„ÇãÈÖçÊÖÆ„Çí„Åó„Å¶„Åè„Çå„Çã„Ç≥„Éü„É•„Éã„ÉÜ„Ç£„Åß„Åô„ÄÇ\n„Åú„Å≤ÂÆâÂøÉ„Åó„Å¶ÂèÇÂä†„Åó„Å¶„Åø„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ\nRSEAA „ÅÆÂÖà„Å®„Ç™„Éº„Ç¨„Éä„Ç§„Ç∂„Éº„Å∏„ÅÆÊÑüË¨ù\n„Åì„Åì„Åæ„ÅßË™≠„Çì„Åß„ÅÑ„Åü„Å†„ÅÑ„Å¶ RSE „Ç≥„Éü„É•„Éã„ÉÜ„Ç£„Å´ËààÂë≥„ÇíÊåÅ„Å£„Å¶„ÅÑ„Åü„Å†„ÅÑ„ÅüÊñπ„ÅØ\nInternational RSE Survey 2022\n„Çí„Åú„Å≤„ÅîË¶ß„Åè„Å†„Åï„ÅÑ„ÄÇ\n„Åù„Çå„ÅØ„Åì„ÅÆ RSEAA „ÅÆÊúüÈñì‰∏≠„Å´ÂÖ¨Èñã„Åï„Çå„Åü„Å∞„Åã„Çä„Åß„Åô„ÄÇ\n„Åù„ÅÆ„Çµ„Éº„Éô„Ç§ÁµêÊûú„ÇíË¶ã„Çã„Åì„Å®„ÅØÁèæÁä∂ÊääÊè°„Å®‰ªäÂæå„ÇíËÄÉ„Åà„Çã„ÅÆ„Å´ÂΩπÁ´ã„Å§„Å®ÊÄù„ÅÑ„Åæ„Åô„ÄÇ\nÊúÄÂæå„Å´„ÄÅRSEAA „ÇíÈÅãÂñ∂„Åó„Å¶„Åè„Å†„Åï„Å£„Åü‰∏ªÂÇ¨ËÄÖ„ÅÆÁöÜÊßò„Å´ÊÑüË¨ù„ÅÑ„Åü„Åó„Åæ„Åô„ÄÇ\n\n\n\n",
    "preview": "blog/2022-10-01-RSEAAExp22-ja/preview.png",
    "last_modified": "2024-12-31T17:43:56+05:30",
    "input_file": {},
    "preview_width": 1183,
    "preview_height": 332
  },
  {
    "path": "blog/2022-10-07-OLS5Exp22/",
    "title": "My Experience of Participating in Open Life Science Cohort-5",
    "description": "During March to July 2022, I got the opportunity to participate in Open Life Science Cohort-5. In this duration, I worked on my project for enhancing the community of RSE Asia Association.",
    "author": [
      {
        "name": "Jyoti Bhogal",
        "url": "https://jyoti-bhogal.github.io/about-me/"
      }
    ],
    "date": "2022-10-07",
    "categories": [
      "Research Software Engineering",
      "Community Building",
      "Open Life Science",
      "Open Science",
      "Experience Blog"
    ],
    "contents": "\r\nClick below for the slide.\r\nhttps://docs.google.com/presentation/d/1aYyBzvDkGMRzl1pMt0RJ4de772t-SwzGyXgmMkHrUWY/edit#slide=id.p\r\n\r\n\r\n\r\n\r\n\r\nProject Title and Motivation\r\nIn the OLS-5 cohort, I got the opportunity to work on my project titled ‚ÄòBuilding Pathways for Onboarding to Research Software Engineering (RSE) Asia Association and Adoption of Code of Conduct‚Äô. My mentor for the program was Malvika Sharan. There are several incidents when people want to contribute in a community activity, but the community does not have a well-defined path that will help a new person contribute. This motivated me to work on building pathways for new members to join the RSE Asia Association.\r\nThe Backstory\r\nThe inception of RSE Asia Association goes back to September 2021, when our idea of starting it got the support of the experts from the OLS-4 cohort. Back then we started off with a basic logo. We had set up the entire digital structure need to run the community. During cohort 5, we updated the logo.\r\nMilestones the RSE Asia Association Crossed During OLS-5\r\nLet‚Äôs have a look at the milestones in the journey that RSE Asia Association went through while OLS-5.\r\nMilestone 1\r\nThe selection into OLS-5 itself was a milestone. Following which, we started discussions around how to get our Association registered.\r\nWe wanted to register ourselves as an NGO. With the guidance from my mentor Malvika, I read several articles. I found out about the different types of NGOs that function here in India. After careful reading, understanding and discussions with my mentor, we finalized which type of NGO would be best for us to register as. At the moment, the registration is a work in progress.\r\nMilestone 2\r\nWhen it comes to community work, we had identified that a lot of people are enthusiastic about participating in community work, however many communities face an issue when it comes to a smooth process for people to join them. Hence, we decided to define clear pathways for people to join us, to contribute/learn for a specific time duration.\r\nMilestone 3\r\nThe RSE Asia Association also got listed as an ‚ÄòObserver Association‚Äô at the International Council of RSE Associations.\r\nMilestone 4\r\nOn 8th July 2022, we conducted a workshop, where Isabela Presedo-Floyd and Mars Lee very graciously accepted our invitation to share their knowledge of how alt-texts are written. It was indeed a very exciting and engaging event where people did hands-on work!\r\nNext steps\r\nJyoti would continue with the formalities of getting the association registered legally. Saranjeet and Jyoti are planning to conduct more and more exciting events and workshops.\r\nStaying connected\r\nCome have a look at our activities!\r\nWe are absolutely active on Twitter. We send out all our updates, reminders and links to various forms via our twitter handle which is @RSE_Asia. Do check out our twitter page, look at our past and upcoming events, DM us to speak your thoughts!\r\nSpecial mentions and acknowledgements\r\nWe feel very grateful to the OLS team for giving us this chance to grow our RSE Asia Association!\r\nWe are extremely thankful to be a part of such a wonderful and supportive community that OLS is!\r\nAnd our contact details are shown herewith. You can get in touch with us via our twitter handle, our email address.\r\nYou can also visit our website, YouTube channel or our GitHub page.\r\nThank you!!!\r\n\r\n\r\n\r\n",
    "preview": "blog/2022-10-07-OLS5Exp22/preview.png",
    "last_modified": "2024-12-31T17:43:56+05:30",
    "input_file": {},
    "preview_width": 137,
    "preview_height": 71
  }
]
